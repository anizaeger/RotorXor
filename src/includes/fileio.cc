/********************************************************************************
 *                                                                              *
 * Basic file manipulation functions.                                           *
 *                                                                              *
 * Copyright (C) 2018 by Anakin-Marc Zaeger                                     *
 * All Rights Reserved                                                          *
 *                                                                              *
 * This program is free software: you can redistribute it and/or modify         *
 * it under the terms of the GNU General Public License as published by         *
 * the Free Software Foundation, either version 3 of the License, or            *
 * (at your option) any later version.                                          *
 *                                                                              *
 * This program is distributed in the hope that it will be useful,              *
 * but WITHOUT ANY WARRANTY; without even the implied warranty                  *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                *
 * GNU General Public License for more details.                                 *
 *                                                                              *
 * You should have received a copy of the GNU General Public License            *
 * along with RotorXor.  If not, see <http://www.gnu.org/licenses/>.            *
 *                                                                              *
 ********************************************************************************/
/**
 * @file
 * @author Anakin-Marc Zaeger
 *
 * @brief Source code for basic file manipulation functions.
 *
 */
#include "fileio.hh"

#include "basicSys.hh"
#include "interface.hh"

#include <iostream>

/*******************************************************************************
	FILE ACCESS - RETURN TYPE: BOOL
*******************************************************************************/
/**
 * Ask for, or generate, filenames for program-made files
 *
 * @param prefix A prefix to prepend to the generated filename.
 * @param suffix A suffix to append to the generated filename.
 * @param extension The extension to use for the filename.
 * @param filename Reference for returning formatted filename.
 *
 * @return true: filename autogenerated;  false: filename manually entered
 */
bool
newFilename( const std::string& prefix, const std::string& suffix, const std::string& extension, std::string filename = std::string())
{
	bool retval;
	if ( filename.empty() || choiceBool( "Auto-generate filename?", 'Y', 'N' ))
	{
		filename = prefix + genTimeStamp( "%Y-%m-%dT%H.%M.%S%z" ) + suffix + "." + extension;
		retval = true;
	}
	else
	{
		printf( "\nPlease enter the filename to save data under.\n" );
		printf( "\nThe extension .%s will be added, and existing files will be overwritten.\n", extension.c_str());
		printf( "\n? " );
		getline( std::cin, filename );
		filename += rprintf(".%s", extension.c_str());
		retval = false;
	}
	return retval;
}

/**
 * Opens file for program output
 *
 * @param outfileName Name of file to open for output.
 * @param outfile Reference to output file stream.
 *
 * @return Bool: true if open success
 */
bool
fileOpenOut( const std::string& outfileName, std::ofstream& outfile )
{
	outfile.open( outfileName );
	if ( outfile.fail()) // If file fails to open, print error to STDERR and exit.
	{
		std::cerr << "\n[" << genTimeStamp() << "]" << rprintf( "*** ERROR - %s: %s\n", strerror( errno ), outfileName.c_str()) << std::endl;
		pauseKey();
		return false;
	}
	return true;
}

/**
 * Opens file for program input
 *
 * @param infileName Name of file to open for output.
 * @param infile Reference to output file stream.
 *
 * @return Bool: true if open success
 */
bool
fileOpenIn( const std::string& infileName, std::ifstream& infile )
{
	infile.open( infileName );
	if ( infile.fail()) // If file fails to open, print error to STDERR and exit.
	{
		std::cerr << "\n[" << genTimeStamp() << "]" << rprintf( "*** ERROR - %s: %s\n", strerror( errno ), infileName.c_str()) << std::endl;
		pauseKey();
		return false;
	}
	return true;
}
