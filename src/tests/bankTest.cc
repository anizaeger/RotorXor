/********************************************************************************
 *                                                                              *
 * Copyright (C) 2018 by Anakin-Marc Zaeger                                     *
 * All Rights Reserved                                                          *
 *                                                                              *
 * This file is part of RotorXor.                                               *
 *                                                                              *
 * RotorXor is free software: you can redistribute it and/or modify             *
 * it under the terms of the GNU General Public License as published by         *
 * the Free Software Foundation, either version 3 of the License, or            *
 * (at your option) any later version.                                          *
 *                                                                              *
 * RotorXor is distributed in the hope that it will be useful,                  *
 * but WITHOUT ANY WARRANTY; without even the implied warranty                  *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                *
 * GNU General Public License for more details.                                 *
 *                                                                              *
 * You should have received a copy of the GNU General Public License            *
 * along with RotorXor.  If not, see <http://www.gnu.org/licenses/>.            *
 *                                                                              *
 ********************************************************************************/
/**
 * @file
 * @author Anakin-Marc Zaeger
 *
 * @brief Rotor Bank Test
 *
 * Constructs a bank consisting of 10 rotors, invokes recursive key generation,
 * and sets each rotor to its respective key accordingly.  This bank is then
 * used to encode random characters (generated by a previously-initialized
 * CharGen instance), which are then subsequently decoded to demonstrate
 * bidirectional translational capabilities.
 *
 */
#include <iostream>
#include <string>

#include "../classes/rotorBank.hh"

#include "../classes/charGen.hh"
#include "../includes/keyfile.hh"

#include "../includes/basicSys.hh"
#include "../includes/interface.hh"

using namespace RotorXor;
const char CharSet::FIRST = ' ';
const char CharSet::LAST = '_';

const int NUMROT = 10;			///< Number of rotors to create.

typedef KeyFile::Key Key;		///< Individual keys.

/// Run test on rotor bank.
int
main( void )
{
	KeyFile keychain;

	Generator charGen( keychain.genKey());
	RotorBank bank;

	for ( int cycle = 0; cycle < 100; cycle++ )
	{
		keychain.clear();
		bank.clear();

		bank.append( NUMROT );
		bank.genKeys();


		for ( int i = 0; i < 10; i++ )
		{
			char inChar = 0, ciphChar = 0, outChar = 0;
			inChar = charGen.getChar();
			ciphChar = bank.encode( inChar );
			outChar = bank.decode( ciphChar );

			std::cout << bank.rotPos() << ": " << inChar << " -> " << ciphChar << " -> " << outChar << std::endl;
			bank.step( { 1, 1, 0, 0, 1, 0, 1, 1, 0, 1 } );
		}
	}
	return 0;
}
